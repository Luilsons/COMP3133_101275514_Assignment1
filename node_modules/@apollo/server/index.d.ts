import { GraphQLRequest, GraphQLResponse } from './execution';
import { Config as BaseConfig } from 'apollo-server-core';
export { default as gql } from 'graphql-tag';
declare type Config = Pick<BaseConfig, 'modules' | 'dataSources' | 'parseOptions' | 'context' | 'introspection' | 'schemaDirectives' | 'cacheControl' | 'plugins'>;
export declare class ApolloServer {
    private readonly config;
    private userContext?;
    private plugins;
    private schemaDerivedData;
    private toDispose;
    constructor(config: Config);
    private generateSchemaDerivedData;
    protected willStart(): Promise<void>;
    stop(): Promise<void>;
    private ensurePluginInstantiation;
    private initializeDocumentStore;
    executeOperation<R extends GraphQLRequest, S extends GraphQLResponse = GraphQLResponse>(request: R, responseInit?: S): Promise<GraphQLResponse>;
}
//# sourceMappingURL=index.d.ts.map