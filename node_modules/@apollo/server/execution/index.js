"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.executeGraphqlRequest = exports.validateGraphqlRequest = exports.parseGraphqlRequest = exports.processGraphqlRequest = void 0;
var requestPipeline_1 = require("apollo-server-core/dist/requestPipeline");
Object.defineProperty(exports, "processGraphQLRequest", { enumerable: true, get: function () { return requestPipeline_1.processGraphQLRequest; } });
const graphql_1 = require("graphql");
const execute_1 = require("./execute");
async function processGraphqlRequest({ request, schema, context, }) {
    const { query, operationName, variables } = request;
    if (!query) {
        return {
            errors: [new graphql_1.GraphQLError('No query document provided')],
        };
    }
    const parseResult = parseGraphqlRequest({ query });
    if ('error' in parseResult) {
        return { errors: [parseResult.error] };
    }
    const documentValidationErrors = validateGraphqlRequest({
        schema,
        document: parseResult.document,
        operationName,
    });
    if (documentValidationErrors.length > 0) {
        return { errors: documentValidationErrors };
    }
    return await executeGraphqlRequest({
        schema,
        document: parseResult.document,
        operationName,
        ...(variables && { variables }),
        ...(context && { context }),
    });
}
exports.processGraphqlRequest = processGraphqlRequest;
function parseGraphqlRequest({ query }) {
    try {
        const document = graphql_1.parse(query);
        return { document };
    }
    catch (e) {
        return { error: e };
    }
}
exports.parseGraphqlRequest = parseGraphqlRequest;
function validateGraphqlRequest({ document, schema, operationName, }) {
    const errors = [];
    const operations = graphql_1.separateOperations(document);
    if (Object.keys(operations).length > 1 && !operationName) {
        errors.push(new graphql_1.GraphQLError('An `operationName` must be provided if multiple operations exist in the query document.'));
    }
    errors.push(...graphql_1.validate(schema, document));
    return errors;
}
exports.validateGraphqlRequest = validateGraphqlRequest;
async function executeGraphqlRequest({ schema, document, operationName, variables, context, }) {
    return await execute_1.execute({
        schema,
        document,
        operationName,
        ...(variables && { variableValues: variables }),
        ...(context && { contextValue: context }),
    });
}
exports.executeGraphqlRequest = executeGraphqlRequest;
//# sourceMappingURL=index.js.map