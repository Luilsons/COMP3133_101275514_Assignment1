export { processGraphQLRequest, GraphQLRequestContext, GraphQLRequestPipelineConfig, } from 'apollo-server-core/dist/requestPipeline';
import { GraphQLRequest, GraphQLResponse, VariableValues } from 'apollo-server-types';
import { DocumentNode, GraphQLError, GraphQLSchema, ExecutionResult } from 'graphql';
export { GraphQLRequest, GraphQLResponse };
export { GraphQLSchemaModule } from 'apollo-graphql';
export { Context, ContextFunction } from 'apollo-server-core';
interface ProcessRequestInput<TContext extends Record<string, any>> {
    request: GraphQLRequest;
    schema: GraphQLSchema;
    context?: TContext;
}
export declare function processGraphqlRequest<TContext extends Record<string, any> = Record<string, any>>({ request, schema, context, }: ProcessRequestInput<TContext>): Promise<ExecutionResult>;
interface ParseInput {
    query: string;
}
declare type ParseResult = {
    error: GraphQLError;
} | {
    document: DocumentNode;
};
export declare function parseGraphqlRequest({ query }: ParseInput): ParseResult;
interface ValidateInput {
    document: DocumentNode;
    schema: GraphQLSchema;
    operationName?: string;
}
export declare function validateGraphqlRequest({ document, schema, operationName, }: ValidateInput): GraphQLError[];
interface ExecutionInput<TContext extends Record<string, any> = Record<string, any>> {
    schema: GraphQLSchema;
    document: DocumentNode;
    operationName?: string;
    variables?: VariableValues;
    context?: TContext;
}
export declare function executeGraphqlRequest<TContext extends Record<string, any> = Record<string, any>>({ schema, document, operationName, variables, context, }: ExecutionInput<TContext>): Promise<ExecutionResult>;
//# sourceMappingURL=index.d.ts.map