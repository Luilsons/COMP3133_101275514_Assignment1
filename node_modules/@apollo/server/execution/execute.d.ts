import { ObjMap } from './jsutils';
import { PromiseOrValue } from 'graphql/jsutils/PromiseOrValue';
import { Path } from 'graphql/jsutils/Path';
import { GraphQLError } from 'graphql/error';
import { DocumentNode, OperationDefinitionNode, SelectionSetNode, FieldNode, FragmentDefinitionNode } from 'graphql/language/ast';
import { GraphQLSchema } from 'graphql/type/schema';
import { GraphQLObjectType, GraphQLField, GraphQLFieldResolver, GraphQLResolveInfo, GraphQLTypeResolver } from 'graphql/type/definition';
declare type Maybe<T> = null | undefined | T;
export declare type ExecutionContext = {
    schema: GraphQLSchema;
    fragments: ObjMap<FragmentDefinitionNode>;
    rootValue: unknown;
    contextValue: unknown;
    operation: OperationDefinitionNode;
    variableValues: {
        [variable: string]: unknown;
    };
    fieldResolver: GraphQLFieldResolver<any, any>;
    typeResolver: GraphQLTypeResolver<any, any>;
    errors: Array<GraphQLError>;
};
export declare type ExecutionResult = {
    errors?: readonly GraphQLError[];
    data?: ObjMap<unknown> | null;
};
export declare type ExecutionArgs = {
    schema: GraphQLSchema;
    document: DocumentNode;
    rootValue?: unknown;
    contextValue?: unknown;
    variableValues?: Maybe<{
        readonly [variable: string]: unknown;
    }>;
    operationName?: Maybe<string>;
    fieldResolver?: Maybe<GraphQLFieldResolver<any, any>>;
    typeResolver?: Maybe<GraphQLTypeResolver<any, any>>;
};
export declare function execute(args: ExecutionArgs): PromiseOrValue<ExecutionResult>;
export declare function assertValidExecutionArguments(schema: GraphQLSchema, document: DocumentNode, rawVariableValues: Maybe<{
    readonly [variable: string]: unknown;
}>): asserts rawVariableValues;
export declare function buildExecutionContext(schema: GraphQLSchema, document: DocumentNode, rootValue: unknown, contextValue: unknown, rawVariableValues: Maybe<{
    readonly [variable: string]: unknown;
}>, operationName: Maybe<string>, fieldResolver: Maybe<GraphQLFieldResolver<unknown, unknown>>, typeResolver?: Maybe<GraphQLTypeResolver<unknown, unknown>>): readonly GraphQLError[] | ExecutionContext;
export declare function collectFields(exeContext: ExecutionContext, runtimeType: GraphQLObjectType, selectionSet: SelectionSetNode, fields: ObjMap<Array<FieldNode>>, visitedFragmentNames: ObjMap<boolean>): ObjMap<Array<FieldNode>>;
export declare function buildResolveInfo(exeContext: ExecutionContext, fieldDef: GraphQLField<unknown, unknown>, fieldNodes: readonly FieldNode[], parentType: GraphQLObjectType, path: Path): GraphQLResolveInfo;
export declare function resolveFieldValueOrError(exeContext: ExecutionContext, fieldDef: GraphQLField<unknown, unknown>, fieldNodes: readonly FieldNode[], resolveFn: GraphQLFieldResolver<unknown, unknown>, source: unknown, info: GraphQLResolveInfo): Error | unknown;
export declare const defaultTypeResolver: GraphQLTypeResolver<{
    __typename: string;
}, unknown>;
export declare const defaultFieldResolver: GraphQLFieldResolver<unknown, unknown>;
export declare function getFieldDef(schema: GraphQLSchema, parentType: GraphQLObjectType, fieldName: string): Maybe<GraphQLField<unknown, unknown>>;
export {};
//# sourceMappingURL=execute.d.ts.map